# -*- coding: utf-8 -*-
"""Bytewise Assignment2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12Gzqj0IYRNq1j7ODqk5BdIkQRJlHZ4HQ

**Week 2 Assignment**

**Question 1**
"""

#asking user to input their name
user_name = input(" Please input your name ")

#asking user to input their age
user_age = input(" Please input your age ")

#asking user to input their email
user_email = input(" Please input your email ")

#asking user to input their favourite number
user_favnum = input(" Please input your favourite number ")

#creating an empty dictionary in which i will store the users information
user_information = {}

#verifying if the email has @ and . in it
if '@' in user_email and '.' in user_email:
  #and then i stored the information the user entered into the dictionary
  user_information['name'] = user_name
  user_information['age'] = user_age
  user_information['email'] = user_email
  user_information['favorite_number'] = user_favnum


  #now if the email consists of '@' and '.' , then i printed a display message which dispalyed the users information according to the example given

  display_message = f"Hello {user_information['name']}, you are {user_information['age']} years old, your email is {user_information['email']}, and your favorite number is {user_information['favorite_number']}."
  print(display_message)
else:
  print("Please input your email in the correct format")

"""**Question 2**"""

#asking the user to input a positive integer
user_input = int(input("Hello, please input a positive integer "))

#then i took modulus of that number by 2.
#if the remainder is 0, it means that the number is even
if user_input % 2 == 0:
  print("The number you entered is an even integer")
#else it is an odd number
else:
  print("The number you entered is an odd integer")

"""**Question 3**"""

#first i created a function by the name of convert_temp in which i have two parameters, temperature and scale

def convert_temp(temp,temp_scale):
  #then using conditional statements i checked the scale that the user entered
  if temp_scale == 'C' or temp_scale == 'c':
     temp_converted = (9/5) * temp + 32
     print(f"The temperature {temp} after conversion into Celsius is {temp_converted}")
  elif temp_scale == 'F' or temp_scale == 'f':
    temp_converted = (5/9) * (temp - 32)
    print(f"The temperature {temp} after conversion into Celsius is {temp_converted}")

temp = float(input("Please enter the temperature you want to convert "))
temp_scale = (input("Please input the scale in which you want to convert (C,c,F,f) "))
convert_temp(temp,temp_scale)

"""**Question 4**"""

#first i asked the user the maximum number of numbers they want to enter
count = int(input("Please input the amount of numbers you want to enter"))

#then i created an empty list in which i would store those numbers
num_list = []

#and then i ran a for loop till count to ask the user to enter that amount of numbers
for i in range(count):
  number = int(input("Please input number {i+1}:"))
  #and after the user enters each number, i appended them into the empty list
  num_list.append(number)

#then i created a function in which i took the list as a parameter

def find_max_min(num_list):
  #and i intially assigned the max number and min number with the first number in the list. both of them are at the start of the list intially/ i did this so when i run a for loop, i will iterate over the list and compare each number

  max_num = num_list[0]
  min_num = num_list[0]

  #then i iterated through my list
  for i in num_list:
    if i > max_num:
      max_num = i
    elif i < min_num:
      min_num = i

  return max_num , min_num

#i then called my function and displayed the output
max_num,min_num = find_max_min(num_list)
print(f"The maximum number in the list is {max_num}")
print(f"The minimum number in the list is {min_num}")

"""**Question 5**"""

#first i used a for loop to ask the user to input name,age and grade of 3 students
student_list = []
for i in range(3):
  student_name = input("Please enter the name of the student {} ".format(i+1))
  student_age = input("Please enter the age of the student {} ".format(i+1))
  student_grade = input("Please enter the grade of the student {} ".format(i+1))

  #then i stored the information in tuple

  tuple = (student_name, student_age, student_grade)
  #and appended the tuple to list
  student_list.append(tuple)

#then i converted the tuple to dictuinary using for loop
#first i created an empty dictionary
student_dictionary = {}
for i in student_list:
  name = i[0]
  age = i[1]
  grade = i[2]
  student_dictionary[name]= (age,grade)

print("Student details:")
for name in student_dictionary:
    print(name + ": " + str(student_dictionary[name]))

"""**Question 6**"""

#first intialized an inverntory
inventory = {
    'apple': 10,
    'banana': 15,
    'orange': 20,
    'grape': 12,
    'melon': 5
}

#i then have a function to update the inventory
def update_inventory(inventory_dict, action, item, quantity):
    #if the user wants to add an item in the inventory then
    if action == 'add':
        #i first checked if the item already exists and is in stock. if yes, i added it
        if item in inventory_dict and quantity > 0:
            inventory_dict[item] += quantity
            #else if it is not in sotck, i displayed a message
        elif quantity <= 0:
            print("Quantity must be greater than 0 to add.")
        else:
            print(f"{item} does not exist in inventory.")

        #now if the user wants to remove item then i did the same, checked it the item is present in the invemtory.
    elif action == 'remove':

        if item in inventory_dict:
            #if yes, i checked if there is enough product to remove
            #for example, if there are 5 items in stock, and the user wants to remove 8, then it will not be possible to remove
            if inventory_dict[item] >= quantity:
                inventory_dict[item] -= quantity
            else:
                print(f"Not enough {item} in inventory to remove {quantity}.")
        else:
            print(f"{item} does not exist in inventory.")
    else:
          #if user wants to perform any other action than adding or removing, it will display error message
        print("Invalid action. Please choose 'add' or 'remove'.")

    return inventory_dict

def get_input(prompt):
    return input(prompt)

while True:
    print("Current Inventory:")
    for item in inventory:
        print(f"{item}: {inventory[item]}")

    action = get_input("Do you want to add or remove items (or type 'exit' to quit)? ").lower()

    if action == 'exit':
        break

    item = get_input("Enter item name: ")
    quantity = int(get_input("Enter quantity: "))


    inventory = update_inventory(inventory, action, item, quantity)


print("Final Inventory:")
for item in inventory:
    print(f"{item}: {inventory[item]}")
